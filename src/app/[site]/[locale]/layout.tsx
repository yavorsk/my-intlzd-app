import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./../../globals.css";
import Link from "next/link";
import { I18nProviderClient } from "../../../locales/client";
import LocaleSwitcher from "../../components/LocaleSwitcher";
import { sites } from "../../../../sites";
import { getI18n } from "../../../locales/server";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function LocalizedLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ site: string; locale: string }>;
}>) {
  const { site, locale } = await params;

  console.log("localized layout lang", locale);
  console.log("localized layout site", site);

  const t = await getI18n();

  return (
    <I18nProviderClient locale={locale}>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <nav className="flex items-center justify-between p-4 bg-gray-800 text-white">
            <div className="text-lg font-semibold">My Next.js App</div>
            <div className="space-x-4">
              <Link href={`/${locale}`} className="hover:underline">
                {t()}
              </Link>
              <Link href={`/${locale}/hello`} className="hover:underline">
                {t('my-test")}
              </Link>
              <Link href={`/${locale}/test`} className="hover:underline">
                FE component only page
              </Link>
              <div className="ml-10 inline">
                <LocaleSwitcher />
              </div>
            </div>{" "}
          </nav>
          {children}
        </body>
      </html>
    </I18nProviderClient>
  );
}

export async function generateStaticParams() {
  const params: { siteId: string; locale: string }[] = [];

  sites.forEach((site) => {
    site.locales.forEach((locale) => {
      params.push({ siteId: site.id, locale });
    });
  });

  return params;
}
